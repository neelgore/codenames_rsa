// Must run with --require webppl-fs --require webppl-viz

var dataString = fs.read("25d_trimmed_normalized.txt");
var rawArray = dataString.split("\n");

var codenamesWordList = fs.read("codenames_wordlist.txt").split("\n");




var toWords = function(str)
{
	return str.split(" ", 1);
};

var toVectors = function(str)
{
	var array = str.split(" ");
	return Vector(array.slice(1));
};




var clues = map(toWords, rawArray);
var clueVectors = map(toVectors, rawArray);
var vectors = Object.fromEntries(zip(clues, clueVectors));



var fixedNumCluesPerTurn = true;
var numCluesPerTurn = 2;

var wordsPrior = function(state, numClues)
{
	var subset = _.sampleSize(state, numClues);
	subset.sort();
	return subset;
}


var meaning = function(clue, words) {

	var wordsVectors = map(function(word) {return vectors[word];}, words);

	var dotWithClue = function(vector)
	{
		return ad.tensor.dot(ad.tensor.transpose(vectors[clue]), vector);
	};

	var positiveDotProduct = function(tensorWithDotProduct)
	{
		var dp = ad.tensor.toScalars(tensorWithDotProduct)[0];
		return dp > 0;
	}

	var dotProducts = map(dotWithClue, wordsVectors);


  return all(positiveDotProduct, dotProducts);
};

var literalListener = function(clue, state, numClues) {
	Infer(function()
		{
			var numCluesThisTurn = fixedNumCluesPerTurn ? numCluesPerTurn : numClues;
			var randomSubset = wordsPrior(state, numCluesThisTurn);
			var uttTruthVal = meaning(clue, randomSubset);
			condition(uttTruthVal);
			return randomSubset;
		}
	)
};

var state = ["chicken", "eagle", "pig"];

/*
display(meaning("animal", ["chicken", "eagle"]));
display(meaning("animal", ["chicken", "pig"]));
display(meaning("animal", ["pig", "eagle"]));
*/

display(literalListener("animal", state, 2));

display(Infer(function() {return flip(0.4);}));



