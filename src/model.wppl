// Must run with --require webppl-fs

var dataString = fs.read("25d_trimmed_normalized.txt");
var rawArray = dataString.split("\n");

var codenamesWordList = fs.read("codenames_wordlist.txt").split("\n");




var toWords = function(str)
{
	return str.split(" ", 1);
};

var toVectors = function(str)
{
	var array = str.split(" ");
	return Vector(array.slice(1));
};




var clues = map(toWords, rawArray);
var clueVectors = map(toVectors, rawArray);
var vectors = Object.fromEntries(zip(clues, clueVectors));



var wordsPrior = function()
{
	var pairs = [["chicken", "eagle"], ["eagle", "pig"], ["chicken", "pig"]];
	return uniformDraw(pairs);
};

var cluePrior = function()
{
	return uniformDraw(["farm", "animal", "bird"]);
};

var alpha = 1;

var meaning = function(clue, words) {

	var distance = function(vector1, vector2)
	{
		var squared = map(function(tuple) 
		{
			return (tuple[0] - tuple[1])*(tuple[0] - tuple[1]);
		}
		, zip(ad.tensor.toScalars(vector1), ad.tensor.toScalars(vector2))
		);

	
		var answer =  Math.sqrt(sum(squared));
		return answer;
	};

	var sigmoid = function(num)
	{
		return 1/(1 + Math.exp(-1*num));
	};

	var trueFalse = function(clue, word)
	{
		var dist = distance(vectors[clue], vectors[word]);
		var prob = sigmoid(1/dist);
		return flip(prob);
	};

	var wordsVectors = map(function(word) {return trueFalse(clue, word);}, words);


  return all(function(s) {return s;}, wordsVectors);
};

var literalListener = function(clue)
{
	Infer(function()
		{
			var randomSubset = wordsPrior();
			var uttTruthVal = meaning(clue, randomSubset);
			condition(uttTruthVal);
			return randomSubset;
		}
	)
};

var speaker = function(subset)
{
	Infer(function()
		{
			var clue = cluePrior();
			factor(alpha*literalListener(clue).score(subset));
			return clue;
		}
	)
};

var pragmaticListener = function(clue)
{
	Infer(function()
		{
			var randomSubset = wordsPrior();
			var s1 = speaker(randomSubset);
			observe(s1, clue);
			return randomSubset;
		}
	)
};


var table = function(dist)
{
	var answer =  zip(map(function(list) {return list.toString();}, dist["supp"]), map(function(obj) {return obj["prob"];}, Object.values(dist["params"]["dist"])));
	return Object.fromEntries(answer);
};


var state = ["chicken", "eagle", "pig"];

var eaglePig = ["eagle", "pig"];


table(pragmaticListener("animal"));


