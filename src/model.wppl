// Must run with --require webppl-fs --require webppl-viz

var dataString = fs.read("25d_trimmed_normalized.txt");
var rawArray = dataString.split("\n");

var codenamesWordList = fs.read("codenames_wordlist.txt").split("\n");




var toWords = function(str)
{
	return str.split(" ", 1);
};

var toVectors = function(str)
{
	var array = str.split(" ");
	return Vector(array.slice(1));
};




var clues = map(toWords, rawArray);
var clueVectors = map(toVectors, rawArray);
var vectors = Object.fromEntries(zip(clues, clueVectors));



var wordsPrior = function()
{
	var pairs = [["chicken", "eagle"], ["eagle", "pig"], ["chicken", "pig"]];
	return uniformDraw(pairs);
}

var cluePrior = function()
{
	return uniformDraw("farm", "animal", "bird");
}


var meaning = function(clue, words) {

	var wordsVectors = map(function(word) {return vectors[word];}, words);

	var dotWithClue = function(vector)
	{
		return ad.tensor.dot(ad.tensor.transpose(vectors[clue]), vector);
	};

	var positiveDotProduct = function(tensorWithDotProduct)
	{
		var dp = ad.tensor.toScalars(tensorWithDotProduct)[0];
		return dp > 0;
	}

	var dotProducts = map(dotWithClue, wordsVectors);


  return all(positiveDotProduct, dotProducts);
};

var literalListener = function(clue)
{
	Infer(function()
		{
			var randomSubset = wordsPrior();
			var uttTruthVal = meaning(clue, randomSubset);
			condition(uttTruthVal);
			return randomSubset;
		}
	)
};

var speaker = function(subset)
{
	Infer(function()
		{
			var clue = cluePrior();
			factor(table(literalListener(clue))[subset.join()]);
			return clue;
		}
	)
}


var table = function(dist)
{
	var answer =  zip(map(function(list) {return list.toString();}, dist["supp"]), map(function(obj) {return obj["prob"];}, Object.values(dist["params"]["dist"])));
	return Object.fromEntries(answer);
}


var state = ["chicken", "eagle", "pig"];

var eaglePig = ["eagle", "pig"];




display(table(literalListener("pig"))[eaglePig.join()]);

